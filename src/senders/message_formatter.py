"""
Message formatting utilities for email sending.
"""

import logging
from datetime import datetime
from typing import Any

logger = logging.getLogger(__name__)


class MessageFormatter:
    """Formats email content into plain text messages."""

    def __init__(self) -> None:
        """Initialize the message formatter."""
        pass

    def format_plain_text(self, content: str, metadata: dict[str, Any]) -> str:
        """
        Format content into a plain text email message.

        Args:
            content: Raw text content to format
            metadata: Additional metadata to include

        Returns:
            Formatted plain text message
        """
        try:
            # Start with headers
            formatted_message = self._add_headers(content, metadata)

            # Add main content
            formatted_message += f"\n\n{content.strip()}\n"

            # Add footers
            formatted_message = self._add_footers(formatted_message, metadata)

            logger.debug(
                f"Formatted message length: {len(formatted_message)} characters"
            )
            return formatted_message

        except Exception as e:
            logger.error(f"Error formatting message: {e}")
            # Return basic content if formatting fails
            return f"{content}\n\n---\nGenerated by Good Morning Agent"

    def _add_headers(self, content: str, metadata: dict[str, Any]) -> str:
        """Add header information to the message."""
        headers = []

        # Add date if available
        if "date" in metadata:
            headers.append(f"📅 日期：{metadata['date']}")
        else:
            headers.append(f"📅 日期：{datetime.now().strftime('%Y-%m-%d')}")

        # Add source if available
        if "source" in metadata:
            headers.append(f"📰 來源：{metadata['source']}")

        # Add generation time
        headers.append(f"⏰ 生成時間：{datetime.now().strftime('%H:%M:%S')}")

        # Add separator
        headers.append("=" * 50)

        return "\n".join(headers)

    def _add_footers(self, content: str, metadata: dict[str, Any]) -> str:
        """Add footer information to the message."""
        footers = [
            "",
            "=" * 50,
            "📧 此郵件由 Good Morning Agent 自動生成",
        ]

        # Add metadata information if present
        if metadata:
            footers.append("📊 相關資訊：")
            for key, value in metadata.items():
                if key not in ["date", "source"]:  # Skip already shown metadata
                    footers.append(f"   • {key}: {value}")

        footers.extend(
            [
                "",
                "如有問題，請檢查您的設定或聯繫管理員。",
                f"生成時間：{datetime.now().isoformat()}",
            ]
        )

        return content + "\n" + "\n".join(footers)
